<resources>
    <string name="app_name">Assignment_App</string>
    <string name="title">Akay\'s Knowledge Hub</string>
    <string name="let_s_learn_n_android_development">Let\'s Learn\nðŸŒŸ Android Development ðŸŒŸ</string>
    <string name="toast_text1">A toast provides simple feedback about an operation in a small popup.</string>
    <string name="toast_text2">It only fills the amount of space required for the message and the current activity remains visible and interactive.</string>
    <string name="toast_text3">Toasts automatically disappear after a timeout.</string>
    <string name="toast_text4">For example, clicking Send on an email triggers a \"Sending message...\" toast</string>
    <string name="toast_eg">Some Toast Examples when buttons are pressed</string>
    <string name="scroll_text1">A view group that allows the view hierarchy placed within it to be scrolled</string>
    <string name="scroll_text2">Scroll view may have only one direct child placed within it.</string>
    <string name="scroll_text3">To add multiple views within the scroll view, make the direct child you add a view group, for example LinearLayout, and place additional views within that LinearLayout.</string>
    <string name="scroll_text4">Scroll view supports vertical scrolling only. For horizontal scrolling, use HorizontalScrollView instead.</string>
    <string name="scroll_text5">A view group that allows the view hierarchy placed within it to be scrolled.\nScroll view may have only one direct child placed within it. To add multiple views within the scroll view, make the direct child you add a view group, for example LinearLayout, and place additional views within that LinearLayout.\nScroll view supports vertical scrolling only.\nFor horizontal scrolling, use HorizontalScrollView instead. Never add a RecyclerView or ListView to a scroll view.\nDoing so results in poor user interface performance and a poor user experience.\nFor vertical scrolling, consider NestedScrollView instead of scroll view which offers greater user interface flexibility and support for the material design scrolling patterns.\nMaterial Design offers guidelines on how the appearance of several UI components, including app bars and banners, should respond to gestures.</string>
    <string name="explicit_text1">Explicit intents specify which application will satisfy the intent, by supplying either the target app\'s package name or a fully-qualified component class name.</string>
    <string name="explicit_text2">You\'ll typically use an explicit intent to start a component in your own app, because you know the class name of the activity or service you want to start.</string>
    <string name="explicit_text3">Going from one screen to another screen within an app is mainly known as explicit intent</string>
    <string name="explicit_text4">For example, you might start a new activity within your app in response to a user action, or start a service to download a file in the background.</string>
    <string name="implicit_text1">Implicit intents do not name a specific component</string>
    <string name="implicit_text2">But instead declare a general action to perform, which allows a component from another app to handle it.</string>
    <string name="Implicit_text3">Going from one app to another app is known as Implicit Intent</string>
    <string name="implicit_text4">For example, if you want to show the user a location on a map, you can use an implicit intent to request that another capable app show a specified location on a map.</string>
    <string name="intentexampleText">Some Explicit Intent Examples when buttons are pressed</string>
    <string name="webtext1">If you want to deliver a web application (or just a web page) as a part of a client application, you can do it using WebView.</string>
    <string name="webtext2">The WebView class is an extension of Android\'s View class that allows you to display web pages as a part of your activity layout.</string>
    <string name="webtext3">It does not include any features of a fully developed web browser, such as navigation controls or an address bar.</string>
    <string name="webtext4">All that WebView does, by default, is show a web page.</string>
    <string name="linearText1">LinearLayout is a view group that aligns all children in a single direction, vertically or horizontally. You can specify the layout direction with the android:orientation attribute.</string>
    <string name="linearText2">All children of a LinearLayout are stacked one after the other, so a vertical list will only have one child per row, no matter how wide they are, and a horizontal list will only be one row high</string>

</resources>